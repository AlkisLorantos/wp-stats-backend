generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      String   @default("coach")
  apiKey    String?
  teamId    Int
  team      Team     @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
}

model Team {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  users    User[]
  players  Player[]
  games    Game[]

  RosterPreset RosterPreset[]
}

model Player {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  name       String   @unique
  birthday   DateTime?
  position   String?
  capNumber  Int?      // Assigned only per game
  teamId     Int
  team       Team     @relation(fields: [teamId], references: [id])
  stats      StatEvent[]

  GameRoster GameRoster[]

  RosterPresetPlayer RosterPresetPlayer[]

  Substitution Substitution[] @relation("PlayerIn")

  substitutionsOut Substitution[] @relation("PlayerOut")
}

enum GameStatus {
  UPCOMING
  LIVE
  ENDED
}

model Game {
  id            Int      @id @default(autoincrement())
  date          DateTime
  opponent      String
  location      String?
  homeOrAway   String?   // "home" or "away"

  status        GameStatus @default(UPCOMING)
  teamScore     Int      @default(0)
  opponentScore Int      @default(0)
  teamId        Int
  team          Team     @relation(fields: [teamId], references: [id])
  stats         StatEvent[]

  GameRoster GameRoster[]

  Substitution Substitution[]
}

model StatEvent {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now())
  type       String
  context    String?       // e.g. "powerplay", "penalty", "counterattack"
  period     Int?          // 1st quarter, 2nd, etc.
  clock      Float?        // time in minutes (e.g. 3.5 = 3:30)
  x          Float?        // x-position on pool
  y          Float?
  capNumber  Int?
  playerId   Int
  gameId     Int

  player     Player   @relation(fields: [playerId], references: [id])
  game       Game     @relation(fields: [gameId], references: [id])
}

model GameRoster {
  id        Int      @id @default(autoincrement())
  capNumber Int      // 1 through 15
  playerId  Int
  gameId    Int

  player    Player   @relation(fields: [playerId], references: [id])
  game      Game     @relation(fields: [gameId], references: [id])

  @@unique([gameId, capNumber]) // Each cap number is unique per game
  @@unique([gameId, playerId])  // Each player can only be assigned once per game
}

model RosterPreset {
  id        Int             @id @default(autoincrement())
  name      String
  teamId    Int
  team      Team            @relation(fields: [teamId], references: [id])
  players   RosterPresetPlayer[]

  createdAt DateTime @default(now())
}

model RosterPresetPlayer {
  id        Int  @id @default(autoincrement())
  presetId  Int
  playerId  Int
  capNumber Int

  preset    RosterPreset @relation(fields: [presetId], references: [id])
  player    Player       @relation(fields: [playerId], references: [id])

  @@unique([presetId, capNumber])
}
model Substitution {
  id         Int      @id @default(autoincrement())
  gameId     Int
  period     Int
  time       Float    // in seconds or minutes
  playerInId Int
  playerOutId Int
  teamId     Int

  game       Game     @relation(fields: [gameId], references: [id])
  playerIn   Player   @relation("PlayerIn", fields: [playerInId], references: [id])
  playerOut  Player   @relation("PlayerOut", fields: [playerOutId], references: [id])
}